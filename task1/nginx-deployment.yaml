apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-config
      containers:
      - name: nginx
        image: nginx:1.26
        # In this section, we specify where to mount the data declared in the nginx-configMap.yaml.
        # The file was successfully mounted; you may refer to the grafana-metrics-conf.png for confirmation.
        volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/conf.d/grafana-metrics.conf
              subPath: grafana-metrics.conf 
        ports:
        # Defines the port the container listens on.
        - containerPort: 80 
        # In this block, we specify the resource limits for each pod. 
        # Each pod in this deployment will be created with specific allocated resources:
        # - minimum 0.1 core CPU and 128MB RAM
        # - maximum 0.25 core CPU and 512MB RAM      
        resources:
            requests:
              cpu: "100m"                
              memory: "128Mi"            
            limits:
              cpu: "250m"                
              memory: "512Mi"            
        # Checks if the container is still running.
        # If this probe fails, Kubernetes kills the container and restarts it.
        livenessProbe:
          httpGet:
            path: /
            port: 80
          # Starts checking after 3 seconds
          initialDelaySeconds: 3
          # Checks every 10 seconds.          
          periodSeconds: 10
        # readinessProbe determines when the container is ready to accept traffic.
        # If the probe fails, Kubernetes removes the pod from the service's endpoints, meaning no traffic will be sent to it.
        readinessProbe:
          httpGet:
            path: /
            port: 80
          # Starts checking after 3 seconds
          initialDelaySeconds: 3
          # Checks every 5 seconds
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      # Port 80 is the port on the Kubernetes Service that other resources inside the cluster use to communicate with the service.
      port: 80
      # targetPort is the port on the actual pod/container where the application is running.
      targetPort: 80
      # With nodePort, we expose the service on a specific port across the nodes in the cluster. 
      # This allows external access to the service via any node's IP address 
      # (127.0.0.1 in my case, since I'm using Minikube on Windows) on the nodePort 30124.
      nodePort: 30124
  type: NodePort 
